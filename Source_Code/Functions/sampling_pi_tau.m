%% Sampling excitation rates and background rates using Metropolis Hastings algorithm
%
%  This code is written by Sina Jazani (03/28/2023)
%  Contact: sjazani1@jhu.edu
function[ mu_D_ex , mu_A_ex  , mu_BD, mu_BA , PI_learned , PI_accept , log_lik] = sampling_pi_tau( ...
                 ... 
PI_accept      , IRF_D_str2      , IRF_A_str2     , F_Kn1_res       , ...
tau_fluc_D     , KA_val          , eta_D          , eta_A           , ...
T_pulse        , mu_D_ex         , mu_A_ex        , mu_BD           , ...
mu_BA          , PI_learned      , prop_mu_D_ex   , alpha_mu_D_ex   , ...
beta_mu_D_ex   , prop_mu_A_ex    , alpha_mu_A_ex  , beta_mu_A_ex    , ...
prop_mu_BD     , alpha_mu_BD     , beta_mu_BD     , prop_mu_BA      , ...
alpha_mu_BA    , beta_mu_BA      , KD_val         , KF_val          , ...
indx1          , indx2           , sigg1          , sigg2           , ...
Num_states_D   , Num_states_A    , tau_fluc_A     , IRFDDstr2       , ...
IRFAAstr2      , sigg11          , sigg22         )



% pre-calculation of the likelihood
log_lik = log_Likelihood(...
        ...
KF_val(1,F_Kn1_res)    , 1./KD_val(1,tau_fluc_D), KA_val(1,tau_fluc_A)   , eta_D        , ...
eta_A                  , IRF_D_str2             , IRF_A_str2             , PI_learned   , ...
T_pulse                , indx1                  , indx2                  , sigg1        , ...
sigg2                  , IRFDDstr2              , IRFAAstr2              , sigg11       , ...
sigg22                );

for iii=1:5

    % Proposal values of the photon weight
    mu_D_ex_new  = (mu_D_ex/prop_mu_D_ex).*randg(prop_mu_D_ex,1,Num_states_D) ;
    mu_A_ex_new  = (mu_A_ex/prop_mu_A_ex).*randg(prop_mu_A_ex,1,Num_states_A) ;
    mu_BD_new    = (mu_BD/prop_mu_BD)*randg(prop_mu_BD) ;
    mu_BA_new    = (mu_BA/prop_mu_BA)*randg(prop_mu_BA) ;

    A1           = exp(-mu_D_ex_new(1,tau_fluc_D));
    A2           = exp(-mu_A_ex_new(1,tau_fluc_A));
    A3           = exp(-mu_BD_new);
    A4           = exp(-mu_BA_new);

    PI_prop      = [(1-A1).*A2.*A3.*A4;(1-A2).*A1.*A3.*A4;(1-A3).*A1.*A2.*A4;(1-A4).*A1.*A2.*A3];
    PI_prop      = PI_prop./sum(PI_prop,1);


    log_lik_prop = log_Likelihood(...
        ...
    KF_val(1,F_Kn1_res)    , 1./KD_val(1,tau_fluc_D), KA_val(1,tau_fluc_A)   , eta_D        , ...
    eta_A                  , IRF_D_str2             , IRF_A_str2             , PI_prop      , ...
    T_pulse                , indx1                  , indx2                  , sigg1        , ...
    sigg2                  , IRFDDstr2              , IRFAAstr2              , sigg11       , ...
    sigg22                );


% Calculate the logarithm of posterior ratio
logr = log_lik_prop-log_lik + ...
       ...
sum(((2*prop_mu_D_ex-alpha_mu_D_ex)*log(mu_D_ex./mu_D_ex_new))+...   
((mu_D_ex-mu_D_ex_new)/beta_mu_D_ex)+...
(prop_mu_D_ex*((mu_D_ex_new./mu_D_ex)-(mu_D_ex./mu_D_ex_new))))+...
...
sum(((2*prop_mu_A_ex-alpha_mu_A_ex)*log(mu_A_ex./mu_A_ex_new))+...   
((mu_A_ex-mu_A_ex_new)/beta_mu_A_ex)+...
(prop_mu_A_ex*((mu_A_ex_new./mu_A_ex)-(mu_A_ex./mu_A_ex_new))))+...
...
((2*prop_mu_BD-alpha_mu_BD)*log(mu_BD./mu_BD_new))+...   
((mu_BD-mu_BD_new)/beta_mu_BD)+...
(prop_mu_BD*((mu_BD_new./mu_BD)-(mu_BD./mu_BD_new)))+...
...
((2*prop_mu_BA-alpha_mu_BA)*log(mu_BA./mu_BA_new))+...   
((mu_BA-mu_BA_new)/beta_mu_BA)+...
(prop_mu_BA*((mu_BA_new./mu_BA)-(mu_BA./mu_BA_new)));



% Accept or reject the proposals
     if  logr > log(rand())
         mu_D_ex       = mu_D_ex_new     ;
         mu_A_ex       = mu_A_ex_new     ;
         mu_BD         = mu_BD_new       ; 
         mu_BA         = mu_BA_new       ;
         PI_learned    = PI_prop         ;
         PI_accept     = PI_accept+1     ;
         log_lik       = log_lik_prop    ;
     else
         PI_accept(2)  = PI_accept(2)+1  ;
     end
end

end