%% Sampling eta using Metropolis Hastings algorithm
%
%  This code is written by Sina Jazani (03/28/2023)
%  Contact: sjazani1@jhu.edu
function[ eta_D_learned   , eta_A_learned    , eta_accept , log_like ] = sampling_eta( ...
... 
eta_accept      , num_sub_sigs    , IRF_D_str2      , IRF_A_str2     , ...
F_res           , tau_fluc_D      , KA_val          , alpha_eta_D    , ...
beta_eta_D      , eta_prop_D      , eta_prop_A      , alpha_eta_A    , ...
beta_eta_A      , eta_D_learned   , eta_A_learned   , PI             , ...
T_pulse         , KD_val          , KF_val          , indx1          , ...
indx2           , sigg1           , sigg2           , log_like       , ...
tau_fluc_A      , IRFDDstr2       , IRFAAstr2       , sigg11         , ...
sigg22           )



for yu=1:5

    % Proposal values of the lifetimes
    bet_D = eta_prop_D*(1./eta_D_learned-1);
    bet_A = eta_prop_A*(1./eta_A_learned-1) ;

    eta_D_prop = betarnd(eta_prop_D,bet_D);
    eta_A_prop = betarnd(eta_prop_A,bet_A);


    log_lik_prop=[];

    for mmk=1:num_sub_sigs
    
        % pre-calculation of the likelihood
        log_lik_prop(mmk) = log_Likelihood(...
        ...
        KF_val(mmk,F_res{mmk})       , 1./KD_val(mmk,tau_fluc_D{mmk})  , KA_val(mmk,tau_fluc_A{mmk})  , eta_D_prop     , ...
        eta_A_prop                 , IRF_D_str2                    , IRF_A_str2                 , PI{mmk}        , ...
        T_pulse                    , indx1{mmk}                    , indx2{mmk}                 , sigg1{mmk}     , ...
        sigg2{mmk}                 , IRFDDstr2                     , IRFAAstr2                  , sigg11{mmk}    , ...
        sigg22{mmk}                );
    end

    bet_D1 = eta_prop_D*(1/eta_D_prop-1);
    bet_A1 = eta_prop_A*(1/eta_A_prop-1);

    % Calculate the logarithm of posterior ratio
    logr = sum(log_lik_prop-log_like)+...
           gammaln(eta_prop_D/eta_D_prop)+gammaln(bet_D)-gammaln(eta_prop_D/eta_D_learned)-gammaln(bet_D1)+...
           (eta_prop_D-alpha_eta_D)*log(eta_D_learned/eta_D_prop)+(bet_D1-beta_eta_D)*log(1-eta_D_learned)-(bet_D-beta_eta_D)*log(1-eta_D_prop)+...
           ...
           gammaln(eta_prop_A/eta_A_prop)+gammaln(bet_A)-gammaln(eta_prop_A/eta_A_learned)-gammaln(bet_A1)+...
           (eta_prop_A-alpha_eta_A)*log(eta_A_learned/eta_A_prop)+(bet_A1-beta_eta_A)*log(1-eta_A_learned)-(bet_A-beta_eta_A)*log(1-eta_A_prop);       


    % Accept or reject the proposals
         if  logr > log(rand())
             eta_D_learned        = eta_D_prop       ;
             eta_A_learned        = eta_A_prop       ;
             eta_accept           = eta_accept+1     ;
             log_like             = log_lik_prop     ;
         else
             eta_accept(2)        = eta_accept(2)+1  ;
         end
    end

end