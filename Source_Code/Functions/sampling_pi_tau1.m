%% Sampling the FRET rates, Donor and acceptor lifetimes using Metropolis Hastings algorithm
%
%  This code is written by Sina Jazani (03/28/2023)
%  Contact: sjazani1@jhu.edu
function[ log_lik, KA_val , KD_val , KF_val] = sampling_pi_tau1( ...
                 ... 
IRF_D_str2      , IRF_A_str2      , F_Kn1_res       , tau_fluc_D      , ...
KA_val          , eta_D           , eta_A           , T_pulse         , ...
KD_val          , KF_val          , PI_learned      , indx1           , ...
indx2           , sigg1           , sigg2           , Num_states_D    , ...
Num_states_A    , tau_fluc_A      , KA_val_prop     , KA_val_alpha    , ...
KA_val_beta     , KF_val_prop     , KF_val_alpha    , KF_val_beta     , ...
KD_val_prop     , KD_val_alpha    , KD_val_beta     , Num_states_F    , ...
log_lik         , IRFDDstr2       , IRFAAstr2       , sigg11          , ...
sigg22          )

for iii=1:5

    % Proposal values of the FRET and PIFE rates
    KF_prop     = (KF_val/KF_val_prop).*randg(KF_val_prop,length(sigg1),Num_states_F) ;
    KD_prop     = (KD_val/KD_val_prop).*randg(KD_val_prop,length(sigg1),Num_states_D) ; 
    KA_prop     = (KA_val/KA_val_prop).*randg(KA_val_prop,length(sigg1),Num_states_A) ; 

    log_lik_prop=[];
    KD_propp = 1./KD_prop;
    
    % pre-calculation of the likelihood
    for mm=1:length(sigg1)
        log_lik_prop(1,mm) = log_Likelihood(...
            ...
        KF_prop(mm,F_Kn1_res{mm}) , KD_propp(mm,tau_fluc_D{mm}) , KA_prop(mm,tau_fluc_A{mm})  , eta_D           , ...
        eta_A                     , IRF_D_str2                  , IRF_A_str2                  , PI_learned{mm}  , ...
        T_pulse                   , indx1{mm}                   , indx2{mm}                   , sigg1{mm}       , ...
        sigg2{mm}                 , IRFDDstr2                   , IRFAAstr2                   , sigg11{mm}      , ...
        sigg22{mm}               );
    end

    % Calculate the logarithm of posterior ratio
    logr = sum(log_lik_prop-log_lik)+...
        ...
    sum(((2*KA_val_prop-KA_val_alpha)*log(KA_val./KA_prop))+...   
    ((KA_val-KA_prop)/KA_val_beta)+...
    (KA_val_prop*((KA_prop./KA_val)-(KA_val./KA_prop))))+...
        ...
    sum(((2*KF_val_prop-KF_val_alpha)*log((KF_val+eps)./(KF_prop+eps)))+...   
    ((KF_val-KF_prop)/KF_val_beta)+...
    (KF_val_prop*((KF_prop./(KF_val+eps))-(KF_val./(KF_prop+eps)))))+...
        ...
    sum(((2*KD_val_prop-KD_val_alpha)*log((KD_val+eps)./(KD_prop+eps)))+...   
    ((KD_val-KD_prop)/KD_val_beta)+...
    (KD_val_prop*((KD_prop./(KD_val+eps))-(KD_val./(KD_prop+eps)))));


    % Accept or reject the proposals
    if  logr > log(rand())
        KA_val        = KA_prop         ; 
        KD_val        = KD_prop         ;
        KF_val        = KF_prop         ;
        log_lik       = log_lik_prop    ;
    end
end

end